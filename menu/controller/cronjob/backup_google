#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on Ubuntu             #
#                                                                    #
#                Author: TinyActive - Base On HOSTVN.VN Scripts      #
#                  Website: https://github.com/TinyActive/panel      #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

source /var/hostvn/menu/validate/rule
source /var/hostvn/menu/helpers/function

_create_drive_connect(){
    while true
    do
        echo "Ten ket noi khong chua ky tu dac biet va dai 5 ky tu tro len."
        read -r -p "Nhap vao ten ket noi muon tao (Viet lien, khong dau) [0 = Thoat]: " remote_name
        echo
        if validate_user "${remote_name}" || [ "${remote_name}" == "0" ]; then
            break
        else
            printf "%s\n" "${RED}Ten ket noi khong dung dinh dan. Vui long nhap lai.${NC}"
        fi
    done

    if [ "${remote_name}" == "0" ]; then
        clear
        printf "%s\n" "${RED}Huy hanh dong.${NC}"
    else
        rclone config create "${remote_name}" drive config_is_local false scope drive use_trash false
        clear

        _select_remote
        if [[ -z "${remote}" ]]; then
            clear
            printf "%s\n" "${RED}Ban da huy thao tac.${NC}"
        else
            _run
        fi
    fi
}

_select_type(){
    echo "Lua chon kieu backup ?"
    PS3='Nhap lua chon cua ban (1-3): '
    options=("Backup theo ten mien" "Backup toan bo ten mien" "Huy tao cronjob")
    select opt in "${options[@]}"
    do
        case $opt in
            "Backup theo ten mien") type="one"; break;;
            "Backup toan bo ten mien") type="all"; break;;
            "Huy tao cronjob") type="0"; break;;
            *) printf "%s\n" "${RED}Ban nhap sai, vui long nhap lai.${NC}";;
        esac
    done
}

_select_time(){
    echo "Lua chon thoi gian ?"
    PS3='Nhap lua chon cua ban (1-4): '
    options=("Backup 1 lan/ngay" "Backup 1 lan/tuan" "Backup 1 lan/thang" "Backup 1 lan/nam" "Huy tao cronjob")
    select opt in "${options[@]}"
    do
        case $opt in
            "Backup 1 lan/ngay") time="@midnight"; break;;
            "Backup 1 lan/tuan") time="@weekly"; break;;
            "Backup 1 lan/thang") time="@monthly"; break;;
            "Backup 1 lan/nam") time="@yearly"; break;;
            "Huy tao cronjob") time="0"; break;;
            *) printf "%s\n" "${RED}Ban nhap sai, vui long nhap lai.${NC}";;
        esac
    done
}

_input_backup_num(){
    echo "Nhap so ban backup ban muon luu tru: "
    echo "VD: Backup hang ngay va nhap 14 - Se luu backup 14 ngay gan nhat - Cac ban cu hon se bi xoa"
    echo "VD: Backup hang tuan va nhap 3 - Se luu backup 3 tuan gan nhat - Cac ban cu hon se bi xoa"
    while true
    do
        read -r -p "Nhap vao lua chon cua ban [0 = Thoat]:" backup_num
        echo
        if [[ "${backup_num}" =~ ^[0-9]+$ ]]; then
            break
        else
            printf "%s\n"  "${RED}Gia tri khong chinh xac. Vui long nhap lai.${NC}"
        fi
    done
}

_set_backup_time(){
    _input_backup_num
    if [[ "${time}" == "@weekly" ]]; then
        backup_num=$((backup_num*7))
    elif [[ "${time}" == "@monthly" ]]; then
        backup_num=$((backup_num*30))
    elif [[ "${time}" == "@yearly" ]]; then
        backup_num=$((backup_num*365))
    else
        backup_num="${backup_num}"
    fi

    sed -i '/backup_num=/d' "${FILE_INFO}"
    echo "backup_num=${backup_num}" >> "${FILE_INFO}"
}

_delete_old_backup_cron(){
    cron_local_backup=$(crontab -l | grep -w 'backup_local')
    if [ -n "${cron_local_backup}" ]; then
        crontab -u root -l | grep -v "${cron_local_backup}" | crontab -u root -
    fi

    cron_backup_onedrive_all=$(crontab -l | grep -w 'backup_onedrive_all')
    if [ -n "${cron_backup_onedrive_all}" ]; then
        crontab -u root -l | grep -v "${cron_backup_onedrive_all}" | crontab -u root -
    fi

    backup_onedrive_one=$(crontab -l | grep -w 'backup_onedrive_one')
    if [ -n "${backup_onedrive_one}" ]; then
        crontab -u root -l | grep -v "${backup_onedrive_one}" | crontab -u root -
    fi
}

_create_cron_backup_all(){
    cron_all_exists=$(crontab -l | grep -w 'gg_drive_all')
    if [ -z "${cron_all_exists}" ]; then
        _delete_old_backup_cron
        crontab -l > backupgg
        echo "${time} bash /var/hostvn/menu/cronjob/gg_drive_all >/dev/null 2>&1" >> backupgg
        crontab backupgg
        rm -rf backupgg
    fi
}

_create_cron_backup_one(){
    cron_one_exists=$(crontab -l | grep -w 'gg_drive_one')
    if [ -z "${cron_one_exists}" ]; then
        _delete_old_backup_cron
        crontab -l > backupgg
        echo "${time} bash /var/hostvn/menu/cronjob/gg_drive_one >/dev/null 2>&1" >> backupgg
        crontab backupgg
        rm -rf backupgg
    fi
}

_backup_one(){
    _select_domain
    if [[ -z "${domain}" && -z "${ALERT}" ]]; then
        clear
        printf "%s\n" "${RED}Ban da chon huy thao tac.${NC}"
    else
        if [ -z "${ALERT}" ]; then
            _select_time
            if [ "${time}" == "0" ]; then
                clear
                printf "%s\n" "${RED}Huy tao cronjob.${NC}"
            else
                _set_backup_time
                if [ "${backup_num}" == "0" ]; then
                    clear
                    printf "%s\n" "${RED}Huy tao cronjob.${NC}"
                else
                    sed -i '/remote/d' "${FILE_INFO}"
                    echo "remote=${remote}" >> "${FILE_INFO}"
                    if [ ! -d "${BASH_DIR}/ggdrive" ]; then
                        mkdir -p "${BASH_DIR}/ggdrive"
                    fi
                    if [ ! -f "${BASH_DIR}/ggdrive/${domain}" ]; then
                        touch "${BASH_DIR}"/ggdrive/"${domain}"
                    fi
                    _create_cron_backup_one
                    clear
                    printf "%s\n" "${GREEN}Tao cronjob thanh cong.${NC}"
                    echo ""
                fi
            fi
        else
            clear
            printf "%s\n" "${ALERT}"
        fi
    fi
}

_backup_all(){
    _select_time
    if [ "${time}" == "0" ]; then
        clear
        printf "%s\n" "${RED}Huy tao cronjob.${NC}"
    else
        _set_backup_time
        if [ "${backup_num}" == "0" ]; then
            clear
            printf "%s\n" "${RED}Huy tao cronjob.${NC}"
        else
            sed -i '/remote/d' "${FILE_INFO}"
            echo "remote=${remote}" >> "${FILE_INFO}"
            _create_cron_backup_all
            clear
            printf "%s\n" "${GREEN}Tao cronjob thanh cong.${NC}"
            echo ""
        fi
    fi
}

_run(){
    _select_type
    if [ "${type}" == "0" ]; then
        clear
        printf "%s\n" "${RED}Huy tao cronjob.${NC}"
    else
        if [ "${type}" == "one" ]; then
            _backup_one
        else
            _backup_all
        fi
    fi
}

ALERT=""
time=""
backup_num=""
domain=""
type=""
remote_name=""

if [ -f "/root/.config/rclone/rclone.conf" ]; then
    _select_remote
    if [[ -z "${remote}" ]]; then
        clear
        printf "%s\n" "${RED}Ban da huy thao tac.${NC}"
    else
        _run
    fi
else
    clear
    printf "%s\n" "${RED}Ban chua cau hinh ket noi voi Google Drive.${NC}"
    prompt_connect_drive="n"
    echo "Ban co muon cau hinh ket noi voi Google Drive khong ?"
    PS3='Nhap lua chon cua ban (1-2): '
    options=("Yes" "No")
    select opt in "${options[@]}"; do
        case $opt in
        "Yes")
            prompt_connect_drive="y"
            break
            ;;
        "No")
            prompt_connect_drive="n"
            break
            ;;
        *) printf "%s\n" "${RED}Ban nhap sai, vui long nhap lai.${NC}" ;;
        esac
    done

    if [[ "${prompt_connect_drive}" =~ ^([yY])$ ]]; then
        _create_drive_connect
    else
        clear
        printf "${RED}%s${NC}\n" "Huy thao tac."
    fi
fi

menu_cronjob
