#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on Ubuntu             #
#                                                                    #
#                Author: Sanvv - HOSTVN Technical                    #
#                  Website: https://hostvn.vn                        #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

source /var/hostvn/menu/validate/rule
source /var/hostvn/menu/helpers/function

_confirm() {
    clear
    printf "%s\n" "Lua chon thao tac ban muon thuc hien"
    PS3="Nhap vao lua chon cua ban [ 1 - 3 ]: "
    options=("Disable cache plugin config" "Enable cache plugin config" "Cancel")
    select opt in "${options[@]}"; do
        case $opt in
        "Disable cache plugin config")
            action="disable"
            break
            ;;
        "Enable cache plugin config")
            action="enable"
            break
            ;;
        "Cancel")
            action="cancel"
            break
            ;;
        *) printf "${RED}%s${NC}\n" "Lua chon cua ban khong chinh xac. Vui long chon lai. $REPLY" ;;
        esac
    done
}

_select_plugin_cache(){
    plugins_cache="other"
    echo "${SELECT_PLUGINS_CACHE}"
    PS3="${INPUT_SELECT}"
    options=(
        "W3 Total Cache"
        "WP Fastest Cache"
        "WP Rocket"
        "WP Super Cache"
        "Cache Enabler"
        "Swift Performance - PHP Caching Mode"
        "Swift Performance - Rewrite Caching Mode"
        "Other"
    )
    select opt in "${options[@]}"
    do
        case $opt in
            "W3 Total Cache") plugins_cache="w3c"; break;;
            "WP Fastest Cache") plugins_cache="wpfc"; break;;
            "WP Rocket") plugins_cache="wprocket"; break;;
            "WP Super Cache") plugins_cache="wpsc"; break;;
            "Cache Enabler") plugins_cache="enabler"; break;;
            "Swift Performance - PHP Caching Mode") plugins_cache="swift1"; break;;
            "Swift Performance - Rewrite Caching Mode") plugins_cache="swift2"; break;;
            "Other") plugins_cache="other"; break;;
            *) printf "%s\n" "${RED}${WRONG_SELECT}${NC}";;
        esac
    done
}

_set_cache_config() {
    if [[ "${plugins_cache}" == "w3c" ]]; then
        set_cache="include ${NGINX_CONF_DIR}/wordpress/w3c.conf;"
    elif [[ "${plugins_cache}" == "wpfc" ]]; then
        set_cache="include ${NGINX_CONF_DIR}/wordpress/wpfc.conf;"
        rewrite=""
    elif [[ "${plugins_cache}" == "wprocket" ]]; then
        set_cache="include ${NGINX_CONF_DIR}/rocket-nginx/default.conf;"
    elif [[ "${plugins_cache}" == "wpsc" ]]; then
        set_cache="include ${NGINX_CONF_DIR}/wordpress/wpsc.conf;"
        rewrite=""
    elif [[ "${plugins_cache}" == "enabler" ]]; then
        set_cache="include ${NGINX_CONF_DIR}/wordpress/enabler.conf;"
        rewrite=""
    elif [[ "${plugins_cache}" == "swift1" ]]; then
        set_cache="include ${NGINX_CONF_DIR}/extra/staticfiles.conf;"
    elif [[ "${plugins_cache}" == "swift2" ]]; then
        set_cache="include ${NGINX_CONF_DIR}/wordpress/swift2.conf;"
    else
        plugins_cache="other"
        set_cache="include ${NGINX_CONF_DIR}/extra/staticfiles.conf;"
    fi
}

_added_cache_config() {
    check_php_cache=$(grep -w "php_cache.conf" "${VHOST_DIR}/${domain}.conf")
    check_php_cache_woo=$(grep -w "php_cache_woo.conf" "${VHOST_DIR}/${domain}.conf")
    rm -rf "${VHOST_DIR}"/"${domain}".conf

    if [ -f "${CUSTOM_DIR}/wordpress.conf" ]; then
        cp "${CUSTOM_DIR}"/wordpress.conf "${VHOST_DIR}"/"${domain}".conf
    else
        cp "${TEMPLATE_DIR}"/wordpress.conf "${VHOST_DIR}"/"${domain}".conf
    fi

    sed -i "s/WEBSITE_USER/${user}/g" "${VHOST_DIR}"/"${domain}".conf
    sed -i "s/WEBSITE_DOMAIN/${domain}/g" "${VHOST_DIR}"/"${domain}".conf

    if [[ "${plugins_cache}" != "other" ]]; then
        sed -i "s|PLUGIN_CACHE|${set_cache}|g" "${VHOST_DIR}"/"${domain}".conf
        sed -i '/staticfiles.conf/d' "${VHOST_DIR}"/"${domain}".conf
    else
        sed -i '/PLUGIN_CACHE/d' "${VHOST_DIR}"/"${domain}".conf
    fi

    if [ -z "${rewrite}" ]; then
        sed -i '/wordpress.conf/d' "${VHOST_DIR}"/"${domain}".conf
    fi

    plugin_seo=$(grep -w "plugin_seo" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')
    if [ -n "${plugin_seo}" ]; then
        sed -i "s|PLUGIN_SEO|include ${NGINX_CONF_DIR}/wordpress/${plugin_seo}.conf;|g" "${VHOST_DIR}"/"${domain}".conf
    else
        sed -i '/PLUGIN_SEO/d' "${VHOST_DIR}"/"${domain}".conf
    fi

    disable_xmlrpc=$(grep -w "disable_xmlrpc" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')
    if [ "${disable_xmlrpc}" == "no" ]; then
        sed -i '/disable_xmlrpc.conf/d' "${VHOST_DIR}"/"${domain}".conf
    fi

    disable_user_api=$(grep -w "disable_user_api" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')
    if [ "${disable_user_api}" == "no" ]; then
        sed -i '/disable_user_api.conf/d' "${VHOST_DIR}"/"${domain}".conf
    fi

    if [[ -f "/home/${user}/${domain}/htpasswd/wp-admin/.htpasswd" && -f "/home/${user}/${domain}/htpasswd/wp-admin/htpasswd.conf" ]]; then
        sed -i "s|HTPASSWD|include /home/${user}/${domain}/wp-admin/htpasswd/htpasswd.conf;|g" "${VHOST_DIR}"/"${domain}".conf

        sed -i "/limit_req/a auth_basic_user_file /home/${user}/${domain}/htpasswd/wp-admin/.htpasswd;" "${VHOST_DIR}"/"${domain}".conf
        sed -i "/limit_req/a auth_basic \"Restricted\";" "${VHOST_DIR}"/"${domain}".conf
    else
        sed -i '/HTPASSWD/d' "${VHOST_DIR}"/"${domain}".conf
    fi

    if [[ -f "${SSL_DIR}/${domain}/key.pem" && -f "${SSL_DIR}/${domain}/cert.pem" && -s "${SSL_DIR}/${domain}/key.pem" && -s "${SSL_DIR}/${domain}/cert.pem" ]]; then
        expired_date=$(echo "(" "$(date -d "$(openssl x509 -in "${SSL_DIR}"/"${domain}"/cert.pem -text -noout | grep "Not After" | cut -c 25-)" +%s)" - "$(date -d "now" +%s)" ")" / 86400 | bc)
        if [[ -n ${expired_date} && ${expired_date} -gt 0 ]]; then
            sed -i '/return 404;/d' "${VHOST_DIR}"/"${domain}".conf
            sed -i "/listen 80;/a include ${NGINX_CONF_DIR}/extra/https.conf;" "${VHOST_DIR}"/"${domain}".conf
            sed -i "s|ssl_certificate ${SSL_DIR}/server/server.crt;|ssl_certificate ${SSL_DIR}/${domain}/cert.pem;|g" "${VHOST_DIR}"/"${domain}".conf
            sed -i "s|ssl_certificate_key ${SSL_DIR}/server/server.key;|ssl_certificate_key ${SSL_DIR}/${domain}/key.pem;|g" "${VHOST_DIR}"/"${domain}".conf
        fi
    fi

    if [[ -f "${SSL_DIR}/${domain}/paid/key.pem" && -f "${SSL_DIR}/${domain}/paid/cert.pem" && -s "${SSL_DIR}/${domain}/paid/key.pem" && -s "${SSL_DIR}/${domain}/paid/cert.pem" ]]; then
        expired_date=$(echo "(" "$(date -d "$(openssl x509 -in "${SSL_DIR}"/"${domain}"/paid/cert.pem -text -noout | grep "Not After" | cut -c 25-)" +%s)" - "$(date -d "now" +%s)" ")" / 86400 | bc)
        if [[ -n ${expired_date} && ${expired_date} -gt 0 ]]; then
            sed -i '/return 404;/d' "${VHOST_DIR}"/"${domain}".conf
            sed -i '/https.conf;/d' "${VHOST_DIR}"/"${domain}".conf
            sed -i "/listen 80;/a include ${NGINX_CONF_DIR}/extra/https.conf;" "${VHOST_DIR}"/"${domain}".conf
            sed -i "s|ssl_certificate ${SSL_DIR}/server/server.crt;|ssl_certificate ${SSL_DIR}/${domain}/paid/cert.pem;|g" "${VHOST_DIR}"/"${domain}".conf
            sed -i "s|ssl_certificate_key ${SSL_DIR}/server/server.key;|ssl_certificate_key ${SSL_DIR}/${domain}/paid/key.pem;|g" "${VHOST_DIR}"/"${domain}".conf
        fi
    fi

    if [ -n "${check_php_cache}" ]; then
        sed -i "s|PHP_CONFIG|include ${NGINX_CONF_DIR}/php/${domain}/php_cache.conf;|g" "${VHOST_DIR}"/"${domain}".conf
    elif [ -n "${check_php_cache_woo}" ]; then
        sed -i "s|PHP_CONFIG|include ${NGINX_CONF_DIR}/php/${domain}/php_cache_woo.conf;|g" "${VHOST_DIR}"/"${domain}".conf
    else
        sed -i "s|PHP_CONFIG|include ${NGINX_CONF_DIR}/php/${domain}/php_no_cache.conf;|g" "${VHOST_DIR}"/"${domain}".conf
    fi

    if [ ! -d "{WORDPRESS_CRON_DIR}" ]; then
        mkdir -p "${WORDPRESS_CRON_DIR}"
    fi

    if [ ! -f "${WORDPRESS_CRON_DIR}/${domain}" ]; then
        touch "${WORDPRESS_CRON_DIR}"/"${domain}"
    fi

    _cd_dir /home/"${user}"/"${domain}"/public_html
    wp config set DISABLE_WP_CRON true --raw --allow-root

    prefix=$(perl -le "print map+(A..Z,a..z,0..9)[rand 62],0..6")
    wp config set WP_CACHE_KEY_SALT "${domain}"_"${prefix}"_ --allow-root

    cron_exists=$(crontab -l | grep -w 'wpcron')
    if [ -z "${cron_exists}" ]; then
        crontab -l >wpcron
        echo "* * * * * bash /var/hostvn/menu/cronjob/wpcron >/dev/null 2>&1" >>wpcron
        crontab wpcron
        rm -rf wpcron
    fi

    sed -i '/plugin_cache=/d' "${USER_DIR}"/."${domain}".conf
    echo "plugin_cache=${plugins_cache}" >> "${USER_DIR}"/."${domain}".conf
}

_enable_cache_config() {
    _select_plugin_cache
    cache_array=("w3c" "wpfc" "wprocket" "wpsc" "enabler" "swift1" "swift2")

    for entry in "${cache_array[@]}"; do
        check_exists=$(grep -rnw "${VHOST_DIR}/${domain}.conf" -e "${entry}")
        if [[ -n "${check_exists}" ]]; then
            if [ "${entry}" == "${plugins_cache}" ]; then
                ALERT=$(printf "%s\n" "${RED}Ban da cau hinh plugins cache ${entry} roi.${NC}")
            else
                ALERT=$(printf "%s\n" "${RED}Ban hien dang cau hinh plugins cache ${entry}. Vui long xoa cau hinh cu truoc.${NC}")
            fi
            break
        fi
    done

    if [[ ! -d "/home/${user}/${domain}/public_html/wp-content" ]]; then
        ALERT=$(printf "%s\n" "${RED}Website khong su dung WordPress.${NC}")
    fi

    if [[ -z "${ALERT}" ]]; then
        _set_cache_config
        _added_cache_config
        if [[ "${plugins_cache}" == "wprocket" && ! -d "${NGINX_CONF_DIR}/rocket-nginx" ]]; then
            _cd_dir "${NGINX_CONF_DIR}"
            git clone https://github.com/satellitewp/rocket-nginx.git
            _cd_dir "${NGINX_CONF_DIR}"/rocket-nginx
            cp rocket-nginx.ini.disabled rocket-nginx.ini
            php rocket-parser.php
        fi

        if [[ "${plugins_cache}" == "wprocket" && ! -f "${NGINX_CONF_DIR}/rocket-nginx/default.conf" ]]; then
            _cd_dir "${NGINX_CONF_DIR}"/rocket-nginx
            php rocket-parser.php
        fi

        if nginx -t; then
            _restart_service
            clear
            printf "%s\n" "${GREEN}Cau hinh Nginx voi plugin cache ${plugins_cache} thanh cong.${NC}"
        else
            clear
            nginx -t
            printf "%s\n" "${RED}${lang_error_vhost}${NC}"
            printf "%s\n" "${RED}${lang_use_rewrite_config}${NC}"
        fi
    else
        clear
        printf "%s\n" "${ALERT}"
    fi
}

_disable_cache_config() {
    plugins_cache=$(grep -w "plugin_cache" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')

    if [[ -z "${plugins_cache}" || "${plugins_cache}" == 'other' ]]; then
        clear
        printf "${RED}%s${NC}\n" "Website chua duoc cau hinh plugins cache"
    else
        if [ "${plugins_cache}" == "wprocket" ]; then
            sed -i "/rocket-nginx/d" "${VHOST_DIR}"/"${domain}".conf
        else
            sed -i "/${plugins_cache}.conf/d" "${VHOST_DIR}"/"${domain}".conf
        fi

        staticfiles=$(grep -rnw "${VHOST_DIR}/${domain}.conf" -e "staticfiles.conf")

        if [ -z "${staticfiles}" ]; then
            sed -i "/index.html/a include ${NGINX_CONF_DIR}/extra/staticfiles.conf;" "${VHOST_DIR}"/"${domain}".conf
        fi

        sed -i '/plugin_cache=/d' "${USER_DIR}"/."${domain}".conf
        echo "plugin_cache=" >>"${USER_DIR}"/."${domain}".conf

        if [ -f "${WORDPRESS_CRON_DIR}/${domain}" ]; then
            rm -rf "${WORDPRESS_CRON_DIR}"/"${domain:?}"
        fi

        _cd_dir /home/"${user}"/"${domain}"/public_html
        wp config set DISABLE_WP_CRON false --raw --allow-root

        clear
        printf "%s\n" "${GREEN}Xoa cau hinh plugins cache ${plugins_cache} thanh cong${NC}"
    fi
}

ALERT=""
domain=""
action=""

_confirm

if [[ -z "${action}" || "${action}" == "cancel" ]]; then
    clear
    printf "${RED}%s${NC}\n" "Huy thao tac."
else
    _select_wordpress_website
    if [[ -z "${domain}" && -z "${ALERT}" ]]; then
        clear
        printf "%s\n" "${RED}Ban da chon huy thao tac.${NC}"
    else
        if [ -z "${ALERT}" ]; then
            user=$(grep -w "username" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')
            rewrite="include ${NGINX_CONF_DIR}/rewrite/wordpress.conf;"
            plugins_cache="other"
            if [ "${action}" = 'enable' ]; then
                _enable_cache_config
            fi
            if [ "${action}" = 'disable' ]; then
                _disable_cache_config
            fi
        else
            clear
            printf "%s\n" "${ALERT}"
        fi
    fi
fi

wordpress_advanced_menu
