#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on Ubuntu             #
#                                                                    #
#                Author: TinyActive - Base On HOSTVN.VN Scripts      #
#                  Website: https://github.com/TinyActive/panel      #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

source /var/hostvn/menu/validate/rule
source /var/hostvn/menu/helpers/function

_select_backup_location() {
    clear
    PS3="${INPUT_SELECT} [ 1 - 5 ]: "
    location_options=("VPS (Local)" "Google Drive" "OneDrive" "Telegram" "Cancel")
    select opt_location in "${location_options[@]}"; do
        case $opt_location in
        "VPS (Local)")
            location="local"
            break
            ;;
        "Google Drive")
            location="drive"
            break
            ;;
        "OneDrive")
            location="onedrive"
            break
            ;;
        "Telegram")
            location="telegram"
            break
            ;;
        "Cancel")
            location="cancel"
            break
            ;;
        *) printf "${RED}%s${NC}\n" "${WRONG_OPTION}" ;;
        esac
    done
}

_selection_backup_type() {
    clear
    PS3="${INPUT_SELECT} [ 1 - 4 ]: "
    type_options=("Backup full (Source code + DB)" "Backup Source code" "Backup Database" "Cancel")
    select opt_type in "${type_options[@]}"; do
        case $opt_type in
        "Backup full (Source code + DB)")
            type="full"
            break
            ;;
        "Backup Source code")
            type="source"
            break
            ;;
        "Backup Database")
            type="database"
            break
            ;;
        "Cancel")
            type="cancel"
            break
            ;;
        *) printf "${RED}%s${NC}\n" "${WRONG_OPTION}" ;;
        esac
    done
}

_prompt_create_drive_connect(){
    clear
    printf "%s\n" "${RED}${lang_not_connect_gg_drive}${NC}"
    prompt_connect_drive="n"
    echo "${lang_ask_connect_gg_drive}"
    PS3="${INPUT_SELECT} (1-2): "
    options=("Yes" "No")
    select opt_prompt in "${options[@]}"; do
        case $opt_prompt in
        "Yes")
            prompt_connect_drive="y"
            break
            ;;
        "No")
            prompt_connect_drive="n"
            break
            ;;
        *) printf "%s\n" "${RED}${WRONG_OPTION}${NC}" ;;
        esac
    done
}

_create_drive_connect() {
    while true; do
        echo "${RED}${lang_remote_name_notify}${NC}"
        read -r -p "Input Remote Name [0 = Exit]: " remote_name
        echo
        if validate_user "${remote_name}" || [ "${remote_name}" == "0" ]; then
            break
        else
            printf "%s\n" "${RED}Remote name ${lang_wrong_format}${NC}"
        fi
    done

    if [ "${remote_name}" == "0" ]; then
        clear
        printf "%s\n" "${RED}${lang_cancel_action}${NC}"
    else
        rclone config create "${remote_name}" drive config_is_local false scope drive use_trash false
        clear

        _select_remote
        if [[ -z "${remote}" ]]; then
            clear
            printf "%s\n" "${RED}${lang_cancel_action}${NC}"
        else
            _run
        fi
    fi
}

_backup_source() {
    user=$(grep -w "username" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')
    _cd_dir /home/"${user}"/"${domain}"
    if [ -f "/home/backup/${CURRENT_DATE}/${domain}/${domain}.tar.gz" ]; then
        rm -rf /home/backup/"${CURRENT_DATE}"/"${domain}"/"${domain}".tar.gz
    fi
    if [[ -f "/home/${user}/${domain}/wp-config.php" && ! -f "/home/${user}/${domain}/public_html/wp-config.php" ]]; then
        cp /home/"${user}"/"${domain}"/wp-config.php /home/"${user}"/"${domain}"/public_html/wp-config.php
    fi

    if [ -d "/home/${user}/${domain}/public_html/storage" ]; then
        tar -cpzvf /home/backup/"${CURRENT_DATE}"/"${domain}"/"${domain}".tar.gz \
                    --exclude "public_html/storage/framework/cache" --exclude "public_html/storage/framework/view" public_html
    else
        tar -cpzvf /home/backup/"${CURRENT_DATE}"/"${domain}"/"${domain}".tar.gz \
                    --exclude "public_html/wp-content/cache" public_html
    fi

    if [[ -f "/home/${user}/${domain}/wp-config.php" && -f "/home/${user}/${domain}/public_html/wp-config.php" ]]; then
        rm -rf /home/"${user}"/"${domain}"/public_html/wp-config.php
    fi
}

_backup_database() {
    db_name=$(grep -w "db_name" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')
    user=$(grep -w "username" "${USER_DIR}/.${domain}.conf" | cut -f2 -d'=')
    _cd_dir /home/backup/"${CURRENT_DATE}"/"${domain}"
    
    if [ -f "/home/backup/${CURRENT_DATE}/${domain}/${db_name}.sql.gz" ]; then
        rm -rf /home/backup/"${CURRENT_DATE}"/"${domain}"/"${db_name}".sql.gz
    fi

    # Check if it's a WordPress site
    if [[ -f "/home/${user}/${domain}/public_html/wp-config.php" ]]; then
        # Check if WP-CLI is installed
        if ! command -v wp &> /dev/null; then
            echo "Installing WP-CLI..."
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            mv wp-cli.phar /usr/local/bin/wp
        
            
            # Install required PHP extensions if missing
            if ! php -m | grep -q "mysqli"; then
                apt-get update && apt-get install -y php-mysqli
            fi
            if ! php -m | grep -q "curl"; then
                apt-get update && apt-get install -y php-curl
            fi
            if ! php -m | grep -q "mbstring"; then
                apt-get update && apt-get install -y php-mbstring
            fi
        fi
        
        # Use WP-CLI to dump database
        cd /home/"${user}"/"${domain}"/public_html
        wp db export --allow-root --path=/home/"${user}"/"${domain}"/public_html "${db_name}".sql
        gzip "${db_name}".sql
        mv "${db_name}".sql.gz /home/backup/"${CURRENT_DATE}"/"${domain}"/
    else
        # Use mysqldump for non-WordPress sites
        mysqldump -uadmin -p"${mysql_pwd}" "${db_name}" | gzip > "${db_name}".sql.gz
    fi
}

_backup_full() {
    _backup_source
    _backup_database
}

_run_backup(){
    if [ "${type}" = "full" ]; then
        _backup_full
    elif [ "${type}" = "source" ]; then
        _backup_source
    else
        _backup_database
    fi
}

_run() {
    if [[ ! -d "/home/backup/${CURRENT_DATE}/${domain}" ]]; then
        mkdir -p /home/backup/"${CURRENT_DATE}"/"${domain}"
    fi

    if [ "${location}" == "drive" ]; then
        remote=""
        _select_remote
        if [[ -z "${remote}" || "${remote}" == 0 ]]; then
            notify="${RED}${lang_not_select_remote}${NC}"
        else
            _run_backup
            clear
            printf "%s\n" "${GREEN}${PROCESSING}${NC}"

            rclone copy /home/backup/"${CURRENT_DATE}"/"${domain}" "${remote}":"${IPADDRESS}"/"${CURRENT_DATE}"/"${domain}" --bwlimit 30M >> /var/log/rclone.log 2>&1
            rm -rf /home/backup/"${CURRENT_DATE}"/"${domain}"
            notify="${GREEN}Backup success.${NC}"
        fi
    elif [ "${location}" == "onedrive" ]; then
        _run_backup
        clear
        printf "%s\n" "${GREEN}${PROCESSING}${NC}"
        onedrive_folder_name=$(grep -w "onedrive_folder_name" "${FILE_INFO}" | cut -f2 -d'=')
        rclone copy /home/backup/"${CURRENT_DATE}"/"${domain}" "onedrive:${onedrive_folder_name}/${IPADDRESS}/${CURRENT_DATE}/${domain}" --bwlimit 30M >> /var/log/rclone.log 2>&1
        rm -rf /home/backup/"${CURRENT_DATE}"/"${domain}"
        notify="${GREEN}Backup success.${NC}"
    else
        _run_backup
        notify="${GREEN}Backup success.${NC}"
    fi

    clear
    printf "%s\n" "${notify}"
    if [ "${location}" == "local" ]; then
        printf "%s\n" "${GREEN}Backup dir:\n /home/backup/${CURRENT_DATE}/${domain}${NC}"
    fi
}

location=""
type=""
remote_name=""
remote=""
domain=""
notify=""

_select_domain
if [[ -z "${domain}" && -z "${ALERT}" ]]; then
    clear
    printf "%s\n" "${RED}${lang_cancel_action}${NC}"
else
    if [ -z "${ALERT}" ]; then
        _select_backup_location

        if [[ -z "${location}" || "${location}" == "cancel" ]]; then
            clear
            printf "${RED}%s${NC}\n" "${lang_cancel_action}"
        else
            _selection_backup_type
            if [[ -z "${type}" || "${type}" == "cancel" ]]; then
                clear
                printf "${RED}%s${NC}\n" "${lang_cancel_action}"
            else
                if [[ "${location}" == "drive" ]]; then
                    check_drive_remote=$(grep -w "drive" "/root/.config/rclone/rclone.conf" | cut -f2 -d'=')
                    if [ -z "${check_drive_remote}" ]; then
                        _prompt_create_drive_connect

                        if [[ "${prompt_connect_drive}" =~ ^([yY])$ ]]; then
                            _create_drive_connect
                        else
                            clear
                            printf "${RED}%s${NC}\n" "${lang_cancel_action}"
                        fi
                    else
                        _run
                    fi
                elif [ "${location}" == "onedrive" ]; then
                    check_onedrive_remote=$(grep -w "onedrive" "/root/.config/rclone/rclone.conf" | cut -f2 -d'=')
                    if [ -z "$check_onedrive_remote" ]; then
                        clear
                        printf "${RED}%s${NC}\n" "Vui long connect OneDrive truoc khi backup."
                    else
                        _run
                    fi
                elif [ "${location}" == "telegram" ]; then
                    source /var/hostvn/menu/controller/backup/backup_telegram
                    if _run_telegram_backup "${domain}" "${type}"; then
                        notify="${GREEN}Backup va gui len Telegram thanh cong.${NC}"
                    else
                        notify="${RED}Co loi xay ra khi backup len Telegram.${NC}"
                    fi
                    clear
                    printf "%s\n" "${notify}"
                else
                    _run
                fi
            fi
        fi
    else
        clear
        printf "%s\n" "${ALERT}"
    fi
fi

menu_backup
