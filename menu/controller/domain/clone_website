#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on Ubuntu             #
#                                                                    #
#                Author: TinyActive - Base On HOSTVN.VN Scripts      #
#                  Website: https://github.com/TinyActive/panel      #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

# shellcheck disable=SC2154
source /var/hostvn/menu/validate/rule
source /var/hostvn/menu/helpers/function

_set_var() {
    user_source=$(grep -w "username" "${USER_DIR}/.${source_domain}.conf" | cut -f2 -d'=')
    db_source=$(grep -w "db_name" "${USER_DIR}/.${source_domain}.conf" | cut -f2 -d'=')
    user_clone=$(grep -w "username" "${USER_DIR}/.${clone_domain}.conf" | cut -f2 -d'=')
    db_user_clone=$(grep -w "db_user" "${USER_DIR}/.${clone_domain}.conf" | cut -f2 -d'=')
    db_clone=$(grep -w "db_name" "${USER_DIR}/.${clone_domain}.conf" | cut -f2 -d'=')
    db_clone_password=$(grep -w "db_password" "${USER_DIR}/.${clone_domain}.conf" | cut -f2 -d'=')
}

_select_source_domain() {
    source_domain=""
    #https://www.cyberciti.biz/faq/linux-unix-shell-check-if-directory-empty/
    if [[ "$(ls -A "${USER_DIR}")" ]]; then
        echo "Lua chon website nguon"
        source_domains=()
        _cd_dir "${USER_DIR}"
        #https://stackoverflow.com/a/2437466
        #https://stackoverflow.com/a/1951523
        #https://stackoverflow.com/a/46882842
        for entry in .*.conf; do
            source_domain=${entry/./}
            source_domain=${source_domain//.conf/}
            source_domains+=("${source_domain}")
        done
        PS3="${INPUT_SELECT} [0 = Thoat] "
        select opt in "${source_domains[@]}"; do
            source_domain=$opt
            break
        done
    else
        ALERT=$(printf "%s\n" "${RED}${EMPTY_DOMAIN}${NC}")
    fi
}

_select_clone_domain() {
    clone_domain=""
    #https://www.cyberciti.biz/faq/linux-unix-shell-check-if-directory-empty/
    echo "Lua chon website clone"
    clone_domains=()
    _cd_dir "${USER_DIR}"
    #https://stackoverflow.com/a/2437466
    #https://stackoverflow.com/a/1951523
    #https://stackoverflow.com/a/46882842
    for entry in .*.conf; do
        clone_domain=${entry/./}
        clone_domain=${clone_domain//.conf/}
        if [ "${clone_domain}" != "${source_domain}" ]; then
            clone_domains+=("${clone_domain}")
        fi
    done

    if [ ${#clone_domains[@]} -ne 0 ]; then
        PS3="${INPUT_SELECT} [0 = Thoat] "
        select opt in "${clone_domains[@]}"; do
            clone_domain=$opt
            break
        done
    else
        ALERT=$(printf "%s\n" "${RED}Ban chua tao ten mien Clone. Vui long kiem tra lai.${NC}")
    fi

}

_check_doc_root_empty() {
    if docroot_empty_or_not "$user_clone" "$clone_domain"; then
        while true; do
            read -r -p "Thu muc public_html webiste ${clone_domain} dang co du lieu. Ban co muon xoa du lieu khong ? (y/n) " prompt_clone
            echo
            if [[ "${prompt_clone}" =~ ^([yY])$ || "${prompt_clone}" =~ ^([nN])$ ]]; then
                break
            else
                printf "%s\n" "${RED}Lua chon cua ban khong chinh xac. Vui long nhap lai.${NC}"
            fi
        done
    else
        prompt_clone="y"
    fi
}

_check_database_empty() {
    if if_db_empty "${db_clone}"; then
        prompt_clone="y"
    else
        while true; do
            read -r -p "Database webiste ${clone_domain} dang co du lieu. Ban co muon xoa du lieu hien co khong ? (y/n) " prompt_clone
            echo
            if [[ "${prompt_clone}" =~ ^([yY])$ || "${prompt_clone}" =~ ^([nN])$ ]]; then
                break
            else
                printf "%s\n" "${RED}Lua chon cua ban khong chinh xac. Vui long nhap lai.${NC}"
            fi
        done
    fi
}

_copy_source() {
    cp -r /home/"${user_source}"/"${source_domain}"/public_html/* /home/"${user_clone}"/"${clone_domain}"/public_html/

    if [ -d "/home/${user_source}/${source_domain}/public_html/wp-includes" ]; then
        _cd_dir /home/"${user_source}"/"${source_domain}"/public_html
        db_prefix="$(wp db prefix --allow-root)"

        _cd_dir /home/"${user_clone}"/"${clone_domain}"/public_html

        if [ -z "${db_prefix}" ]; then
            db_prefix="wp_"
        fi

        rm -rf wp-config.php
        rm -rf license.txt readme.html wp-config-sample.php

        # Create wp-config.php
        wp config create --allow-root --dbname="${db_clone}" --dbuser="${db_user_clone}" \
            --dbpass="${db_clone_password}" --dbprefix="${db_prefix}" --extra-php <<PHP
define( 'WP_DEBUG', false );
define( 'FS_METHOD', 'direct');
define( 'WP_CACHE', true);
define( 'WP_MEMORY_LIMIT', '128M' );
define( 'WP_MAX_MEMORY_LIMIT', '128M' );
PHP

        if [ -f "${BASH_DIR}/wpcron/${clone_domain}" ]; then
            sed -i "/WP_MAX_MEMORY_LIMIT/a define('DISABLE_WP_CRON', true);" /home/"${user_clone}"/"${clone_domain}"/public_html/wp-config.php
        fi

        if [ -f "/home/${user_clone}/${clone_domain}/public_html/wp-config.php" ]; then
            rm -rf /home/"${user_clone}"/"${clone_domain}"/wp-config.php
            mv /home/"${user_clone}"/"${clone_domain}"/public_html/wp-config.php /home/"${user_clone}"/"${clone_domain}"/wp-config.php
        fi

        if [ ! -f "/home/${user_clone}/${clone_domain}/public_html/robots.txt" ]; then
            cat >>"/home/${user_clone}/${clone_domain}/public_html/robots.txt" <<EOrobots_txt
User-agent: *
Disallow: /wp-admin/
Disallow: /wp-includes/
Disallow: /search?q=*
Disallow: *?replytocom
Disallow: */attachment/*
Disallow: /images/
Allow: /wp-admin/admin-ajax.php
Allow: /*.js$
Allow: /*.css$
EOrobots_txt
        fi
    fi

    env_file="/home/${user_clone}/${clone_domain}/public_html/.env"
    if [ -f "$env_file" ]; then
        check_app_key=$(grep -w "APP_KEY" "$env_file" | cut -f2 -d'=')
        if [ -n "${check_app_key}" ]; then
            old_mysql_user=$(grep -w "db_user" "${USER_DIR}/.${source_domain}.conf" | cut -f2 -d'=')
            old_mysql_pass=$(grep -w "db_password" "${USER_DIR}/.${source_domain}.conf" | cut -f2 -d'=')

            sed -i "s|APP_URL=${source_domain}|APP_URL=${clone_domain}|g" "$env_file"
            sed -i "s|DB_DATABASE=${db_source}|DB_DATABASE=${db_clone}|g" "$env_file"
            sed -i "s|DB_USERNAME=${old_mysql_user}|DB_USERNAME=${db_user_clone}|g" "$env_file"
            sed -i "s|DB_PASSWORD=${old_mysql_pass}|DB_PASSWORD=${db_clone_password}|g" "$env_file"
        fi
    fi

    chown -R "${user_clone}":"${user_clone}" /home/"${user_clone}"/"${clone_domain}"/public_html
}

_copy_db() {
    _cd_dir /home/"${user_source}"
    mysqldump -uadmin -p"${mysql_pwd}" "${db_source}" >"${db_source}".sql

    #Empty DB
    tables=$(mysql -uadmin -p"${mysql_pwd}" "${db_clone}" -e 'show tables' | awk '{ print $1}' | grep -v '^Tables')
    for t in ${tables}; do
        mysql -uadmin -p"${mysql_pwd}" "${db_clone}" -e "drop table ${t}"
    done

    mysql -uadmin -p"${mysql_pwd}" "${db_clone}" <"${db_source}".sql
    rm -rf "${db_source}".sql
}

_change_url_if_is_wordpress() {
    if [ -d "/home/${user_clone}/${clone_domain}/public_html/wp-includes" ]; then
        _cd_dir /home/"${user_clone}"/"${clone_domain}"/public_html
        wp search-replace --allow-root "${source_domain}" "${clone_domain}"
    fi
}

_copy_htpasswd() {
    if [[ -f "/home/${user_source}/${source_domain}/htpasswd/.htpasswd" && -f "/home/${user_source}/${source_domain}/htpasswd/htpasswd.conf" ]]; then
        mkdir -p /home/"${user_clone}"/"${clone_domain}"/htpasswd
        cp /home/"${user_source}"/"${source_domain}"/htpasswd/.htpasswd /home/"${user_clone}"/"${clone_domain}"/htpasswd/.htpasswd
        cp /home/"${user_source}"/"${source_domain}"/htpasswd/htpasswd.conf /home/"${user_clone}"/"${clone_domain}"/htpasswd/htpasswd.conf
        chown -R "${user_clone}":"${user_clone}" /home/"${user_clone}"/"${clone_domain}"/htpasswd
        chown -R "${user_clone}":"${user_clone}" /home/"${user_clone}"/"${clone_domain}"/htpasswd/.htpasswd
    fi
}

_copy_vhost() {
    rm -rf "${VHOST_DIR}"/"${clone_domain}".conf
    cp "${VHOST_DIR}"/"${source_domain}".conf "${VHOST_DIR}"/"${clone_domain}".conf

    sed -i "s|${source_domain}|${clone_domain}|g" "${VHOST_DIR}"/"${clone_domain}".conf
    sed -i "s|${user_source}|${user_clone}|g" "${VHOST_DIR}"/"${clone_domain}".conf
    sed -i '/htpasswd.conf/d' "${VHOST_DIR}"/"${clone_domain}".conf
    sed -i '/protect_dir.conf/d' "${VHOST_DIR}"/"${clone_domain}".conf

    check_source_domain_keys_zone=$(grep -w "${user_source}" "${NGINX_CONF_DIR}/extra/nginx_cache.conf")

    if [ -n "${check_source_domain_keys_zone}" ]; then
        cat >>"${NGINX_CONF_DIR}/extra/nginx_cache.conf" <<END
fastcgi_cache_path /home/${user_clone}/${clone_domain}/cache levels= keys_zone=${user_clone}:100m max_size=1G inactive=60m;
END
        if [ ! -d "/home/${user_clone}/${clone_domain}/cache" ]; then
            mkdir -p "/home/${user_clone}/${clone_domain}/cache"
            chown -R "${user_clone}":"${user_clone}" /home/"${user_clone}"/"${clone_domain}"/cache
        fi
    fi

    if [[ -f "${SSL_DIR}/${domain}/key.pem" && -f "${SSL_DIR}/${domain}/cert.pem" && -s "${SSL_DIR}/${domain}/key.pem" && -s "${SSL_DIR}/${domain}/cert.pem" ]]; then
        expired_date=$(echo "(" "$(date -d "$(openssl x509 -in "${SSL_DIR}"/"${domain}"/cert.pem -text -noout | grep "Not After" | cut -c 25-)" +%s)" - "$(date -d "now" +%s)" ")" / 86400 | bc)
        if [[ -n ${expired_date} && ${expired_date} -gt 0 ]]; then
            sed -i '/return 404;/d' "${VHOST_DIR}"/"${domain}".conf
            sed -i '/error_page 404/d' "${VHOST_DIR}"/"${domain}".conf
            check_redirect=$(grep -w "https.conf" "${VHOST_DIR}"/"${clone_domain}".conf)
            if [ -z "$check_redirect" ]; then
                sed -i "/listen 80;/a include ${NGINX_CONF_DIR}/extra/https.conf;" "${VHOST_DIR}"/"${clone_domain}".conf
            fi
            sed -i '/ssl_certificate/d' "${VHOST_DIR}"/"${clone_domain}".conf
            sed -i '/ssl_certificate_key/d' "${VHOST_DIR}"/"${clone_domain}".conf

            sed -i "/listen 443 ssl http2;/a ssl_certificate ${SSL_DIR}/${domain}/cert.pem;" "${VHOST_DIR}"/"${clone_domain}".conf
            sed -i "/listen 443 ssl http2;/a ssl_certificate_key ${SSL_DIR}/${domain}/key.pem;" "${VHOST_DIR}"/"${clone_domain}".conf
        fi
    fi

    if [[ -f "${SSL_DIR}/${domain}/paid/key.pem" && -f "${SSL_DIR}/${domain}/paid/cert.pem" && -s "${SSL_DIR}/${domain}/paid/key.pem" && -s "${SSL_DIR}/${domain}/paid/cert.pem" ]]; then
        expired_date=$(echo "(" "$(date -d "$(openssl x509 -in "${SSL_DIR}"/"${domain}"/paid/cert.pem -text -noout | grep "Not After" | cut -c 25-)" +%s)" - "$(date -d "now" +%s)" ")" / 86400 | bc)
        if [[ -n ${expired_date} && ${expired_date} -gt 0 ]]; then
            sed -i '/return 404;/d' "${VHOST_DIR}"/"${domain}".conf
            sed -i '/error_page 404/d' "${VHOST_DIR}"/"${domain}".conf
            check_redirect=$(grep -w "https.conf" "${VHOST_DIR}"/"${clone_domain}".conf)
            if [ -z "$check_redirect" ]; then
                sed -i "/listen 80;/a include ${NGINX_CONF_DIR}/extra/https.conf;" "${VHOST_DIR}"/"${clone_domain}".conf
            fi
            sed -i '/ssl_certificate/d' "${VHOST_DIR}"/"${clone_domain}".conf
            sed -i '/ssl_certificate_key/d' "${VHOST_DIR}"/"${clone_domain}".conf

            sed -i "/listen 443 ssl http2;/a ssl_certificate ${SSL_DIR}/${domain}/paid/cert.pem;" "${VHOST_DIR}"/"${clone_domain}".conf
            sed -i "/listen 443 ssl http2;/a ssl_certificate_key ${SSL_DIR}/${domain}/paid/key.pem;" "${VHOST_DIR}"/"${clone_domain}".conf
        fi
    fi
}

_run() {
    while true; do
        printf "%s\n" "Ban muon clone tu website ${RED}${source_domain}${NC} sang webiste ${RED}${clone_domain}${NC} ?"
        read -r -p "${INPUT_SELECT} (y/n)" prompt_clone
        echo
        if [[ "${prompt_clone}" =~ ^([yY])$ || "${prompt_clone}" =~ ^([nN])$ ]]; then
            break
        else
            clear
            printf "%s\n" "${RED}${WRONG_SELECT}${NC}"
        fi
    done

    if [[ "${prompt_clone}" =~ ^([yY])$ ]]; then
        printf "%s\n" "${GREEN}${PROCESSING}${NC}"
        _set_var
        _check_doc_root_empty
        _check_database_empty
        if [[ "${prompt_clone}" =~ ^([yY])$ ]]; then
            _copy_source "$@"
            _copy_db
            _change_url_if_is_wordpress
            _copy_htpasswd
            _copy_vhost
            clear
            if nginx -t; then
                _restart_service
                clear
                printf "%s\n" "${GREEN}Clone website thanh cong.${NC}"
            else
                clear
                nginx -t
                printf "%s\n" "${RED}${lang_error_vhost}${NC}"
                printf "%s\n" "${RED}${lang_use_rewrite_config}${NC}"
            fi
        else
            clear
            printf "%s\n" "${RED}${lang_cancel_action}${NC}"
        fi
    else
        clear
        printf "%s\n" "${RED}${lang_cancel_action}${NC}"
    fi
}

ALERT=""
db_prefix=""

_select_source_domain
if [[ -z "${source_domain}" && -z "${ALERT}" ]]; then
    clear
    printf "%s\n" "${RED}Ban da chon huy thao tac${NC}"
else
    if [ -z "${ALERT}" ]; then
        clear
        _select_clone_domain
        if [[ -z "${source_domain}" && -z "${ALERT}" ]]; then
            clear
            printf "%s\n" "${RED}Ban da chon huy thao tac${NC}"
        else
            if [ -z "${ALERT}" ]; then
                clear
                _run "$@"
            else
                clear
                printf "%s\n" "${ALERT}"
            fi
        fi
    else
        clear
        printf "%s\n" "${ALERT}"
    fi
fi

menu_domain
