#!/bin/bash

######################################################################
#           Auto Install & Optimize LEMP Stack on Ubuntu             #
#                                                                    #
#                Author: TinyActive - Base On HOSTVN.VN Scripts      #
#                  Website: https://github.com/TinyActive/panel      #
#                                                                    #
#              Please do not remove copyright. Thank!                #
#  Please do not copy under any circumstance for commercial reason!  #
######################################################################

CHOICE=1
MODULES_LINK="https://tinyactive.github.io/panel/modules"
nginx_v=$(
    nginx -v 2>&1 | grep -o '[0-9.]*$'
    echo
)
nginx_status=$(pgrep -x nginx >/dev/null && printf "%s\n" "${GREEN}Active${NC}" || printf "%s\n" "${GREEN}Inactive (Dead)${NC}")

printf "%s=============================%s\n" "${GREEN}" "${NC}"
printf "%s        Nginx Manager        %s\n" "${GREEN}" "${NC}"
printf "%s=============================%s\n" "${GREEN}" "${NC}"
printf "%sNginx version : %s%s\n" "${GREEN}" "${nginx_v}" "${NC}"
printf "%s=============================%s\n" "${GREEN}" "${NC}"
printf "%sStatus: %s%s\n" "${GREEN}" "${nginx_status}" "${NC}"
printf "%s=============================%s\n" "${GREEN}" "${NC}"

while [ "${CHOICE}" != "0" ]; do
    printf "%s1. Restart Nginx%s\n" "${GREEN}" "${NC}"
    printf "%s2. ${lang_test_nginx_config}%s\n" "${GREEN}" "${NC}"
    printf "%s3. Update Nginx%s\n" "${GREEN}" "${NC}"
    printf "%s4. Rebuild Nginx%s\n" "${GREEN}" "${NC}"
    printf "%s=========================%s\n" "${GREEN}" "${NC}"
    read -r -p " ${SELECT_OPTION} " CHOICE

    if [ -z "${CHOICE}" ]; then
        CHOICE=1
        continue
    fi
    case ${CHOICE} in
    1)
        clear
        printf "%s\n" "${RED}${PROCESSING}${NC}"
        sleep 1
        if nginx -t; then
            systemctl restart nginx
            clear
            printf "%s\n" "${GREEN}${lang_restart_nginx_success}${NC}"
            sleep 1
            echo
        else
            nginx -t
            printf "%s\n" "${RED}${lang_nginx_config_error}${NC}"
        fi

        lemp_nginx
        ;;
    2)
        clear
        sleep 1
        nginx -t
        sleep 1
        echo
        lemp_nginx
        ;;
    3)
        clear
        UPDATE_LINK="https://tinyactive.github.io/panel/update"
        NGINX_NEW_VERSION=$(curl -s ${UPDATE_LINK}/version | grep "nginx_new_version=" | cut -f2 -d'=')
        NGINX_CURRENT_VERSION=$(curl -s ${UPDATE_LINK}/version | grep "nginx_version=" | cut -f2 -d'=')
        if [[ -n "$NGINX_NEW_VERSION" && "$NGINX_NEW_VERSION" != "$NGINX_CURRENT_VERSION" ]]; then
            MODULE_PATH="/usr/share/nginx_module"
            mkdir -p "${MODULE_PATH}"
            NPS_VERSION=$(curl -s ${UPDATE_LINK}/version | grep "nps_version=" | cut -f2 -d'=')
            ngx_cache_purge_version=$(curl -s ${UPDATE_LINK}/version | grep "ngx_cache_purge_version=" | cut -f2 -d'=')
            more_clear_headers_v=$(curl -s ${UPDATE_LINK}/version | grep "more_clear_headers_v=" | cut -f2 -d'=')
            openssl_version=$(curl -s ${UPDATE_LINK}/version | grep "openssl_version=" | cut -f2 -d'=')
            pcre_version=$(curl -s ${UPDATE_LINK}/version | grep "pcre_version=" | cut -f2 -d'=')
            zlib_version=$(curl -s ${UPDATE_LINK}/version | grep "zlib_version=" | cut -f2 -d'=')
            nginx_module_vts_v=$(curl -s ${UPDATE_LINK}/version | grep "nginx_module_vts_v=" | cut -f2 -d'=')

            cd "${MODULE_PATH}" || exit

            rm -rf "${MODULE_PATH:?}"/*

            wget -O- https://github.com/apache/incubator-pagespeed-ngx/archive/v"${NPS_VERSION}".tar.gz | tar -xz
            nps_dir=$(find . -name "*pagespeed-ngx-${NPS_VERSION}" -type d)
            cd "$nps_dir" || exit
            NPS_RELEASE_NUMBER=${NPS_VERSION/beta/}
            NPS_RELEASE_NUMBER=${NPS_VERSION/stable/}

            psol_url=https://dl.google.com/dl/page-speed/psol/${NPS_RELEASE_NUMBER}.tar.gz
            [ -e scripts/format_binary_url.sh ] && psol_url=$(scripts/format_binary_url.sh PSOL_BINARY_URL)
            wget -O- "${psol_url}" | tar -xz
            cd "${MODULE_PATH}" || exit
            wget -O- http://nginx.org/download/nginx-"${NGINX_NEW_VERSION}".tar.gz | tar -xz
            wget -O- "${MODULES_LINK}"/ngx_cache_purge-"${ngx_cache_purge_version}".tar.gz | tar -xz
            wget -O- "${MODULES_LINK}"/openssl-OpenSSL_"${openssl_version}".tar.gz | tar -xz
            wget -O- ftp://ftp.pcre.org/pub/pcre/pcre-"${pcre_version}".tar.gz | tar -xz
            wget -O- https://www.zlib.net/zlib-"${zlib_version}".tar.gz | tar -xz
            wget -O- "${MODULES_LINK}"/headers-more-nginx-module-"${more_clear_headers_v}".tar.gz | tar -xz
            wget -O- https://github.com/vozlt/nginx-module-vts/archive/refs/tags/v"${nginx_module_vts_v}".tar.gz | tar -xz
            git clone --depth 1 https://github.com/google/ngx_brotli
            cd ngx_brotli || exit
            git submodule update --init

            service nginx stop
            cd "${MODULE_PATH}"/nginx-"${NGINX_NEW_VERSION}"/ || exit
            ./configure \
                "--user=nginx" \
                "--group=nginx" \
                "--prefix=/usr" \
                "--sbin-path=/usr/sbin" \
                "--conf-path=/etc/nginx/nginx.conf" \
                "--pid-path=/var/run/nginx.pid" \
                "--http-log-path=/var/log/nginx/access_log" \
                "--error-log-path=/var/log/nginx/error_log" \
                "--without-mail_imap_module" \
                "--without-mail_smtp_module" \
                "--with-http_ssl_module" \
                "--with-http_realip_module" \
                "--with-http_stub_status_module" \
                "--with-http_gzip_static_module" \
                "--with-http_dav_module" \
                "--with-http_v2_module" \
                "--with-pcre=../pcre-${pcre_version}" \
                "--with-pcre-jit" \
                "--with-zlib=../zlib-${zlib_version}" \
                "--with-openssl=../openssl-OpenSSL_${openssl_version}" \
                "--with-openssl-opt=no-nextprotoneg" \
                "--add-module=../ngx_cache_purge-${ngx_cache_purge_version}" \
                "--add-module=../incubator-pagespeed-ngx-${NPS_VERSION}" \
                "--add-module=../headers-more-nginx-module-${more_clear_headers_v}" \
                "--add-module=../ngx_brotli" \
                "--add-module=../nginx-module-vts-${nginx_module_vts_v}" \
                "--with-cc-opt='-D FD_SETSIZE=32768'"

            make && make install
            if nginx -t; then
                systemctl restart nginx
                clear
                printf "%s\n" "${GREEN}Rebuild Nginx successful.${NC}"
            else
                clear
                nginx -t
                printf "%s\n" "${RED}${lang_nginx_config_error}${NC}"
            fi
        else
            printf "%s\n" "${RED}Khong tim thay phien ban Nginx moi${NC}"
        fi

        lemp_nginx
        ;;
    4)
        clear
        UPDATE_LINK="https://tinyactive.github.io/panel/update"
        NGINX_VERSION=$(curl -s ${UPDATE_LINK}/version | grep "nginx_version=" | cut -f2 -d'=')
        MODULE_PATH="/usr/share/nginx_module"
        mkdir -p "${MODULE_PATH}"
        NPS_VERSION=$(curl -s ${UPDATE_LINK}/version | grep "nps_version=" | cut -f2 -d'=')
        ngx_cache_purge_version=$(curl -s ${UPDATE_LINK}/version | grep "ngx_cache_purge_version=" | cut -f2 -d'=')
        more_clear_headers_v=$(curl -s ${UPDATE_LINK}/version | grep "more_clear_headers_v=" | cut -f2 -d'=')
        openssl_version=$(curl -s ${UPDATE_LINK}/version | grep "openssl_version=" | cut -f2 -d'=')
        pcre_version=$(curl -s ${UPDATE_LINK}/version | grep "pcre_version=" | cut -f2 -d'=')
        zlib_version=$(curl -s ${UPDATE_LINK}/version | grep "zlib_version=" | cut -f2 -d'=')
        nginx_module_vts_v=$(curl -s ${UPDATE_LINK}/version | grep "nginx_module_vts_v=" | cut -f2 -d'=')

        cd "${MODULE_PATH}" || exit

        rm -rf "${MODULE_PATH:?}"/*

        wget -O- https://github.com/apache/incubator-pagespeed-ngx/archive/v"${NPS_VERSION}".tar.gz | tar -xz
        nps_dir=$(find . -name "*pagespeed-ngx-${NPS_VERSION}" -type d)
        cd "$nps_dir" || exit
        NPS_RELEASE_NUMBER=${NPS_VERSION/beta/}
        NPS_RELEASE_NUMBER=${NPS_VERSION/stable/}

        psol_url=https://dl.google.com/dl/page-speed/psol/${NPS_RELEASE_NUMBER}.tar.gz
        [ -e scripts/format_binary_url.sh ] && psol_url=$(scripts/format_binary_url.sh PSOL_BINARY_URL)
        wget -O- "${psol_url}" | tar -xz
        cd "${MODULE_PATH}" || exit
        wget -O- http://nginx.org/download/nginx-"${NGINX_VERSION}".tar.gz | tar -xz
        wget -O- "${MODULES_LINK}"/ngx_cache_purge-"${ngx_cache_purge_version}".tar.gz | tar -xz
        wget -O- "${MODULES_LINK}"/openssl-OpenSSL_"${openssl_version}".tar.gz | tar -xz
        wget -O- ftp://ftp.pcre.org/pub/pcre/pcre-"${pcre_version}".tar.gz | tar -xz
        wget -O- https://www.zlib.net/zlib-"${zlib_version}".tar.gz | tar -xz
        wget -O- "${MODULES_LINK}"/headers-more-nginx-module-"${more_clear_headers_v}".tar.gz | tar -xz
        wget -O- https://github.com/leev/ngx_http_geoip2_module/archive/refs/tags/3.3.tar.gz | tar -xz
        wget -O- https://github.com/vozlt/nginx-module-vts/archive/refs/tags/v"${nginx_module_vts_v}".tar.gz | tar -xz
        git clone --depth 1 https://github.com/google/ngx_brotli
        cd ngx_brotli || exit
        git submodule update --init

        service nginx stop
        cd "${MODULE_PATH}"/nginx-"${NGINX_VERSION}"/ || exit
        ./configure \
            "--user=nginx" \
            "--group=nginx" \
            "--prefix=/usr" \
            "--sbin-path=/usr/sbin" \
            "--conf-path=/etc/nginx/nginx.conf" \
            "--pid-path=/var/run/nginx.pid" \
            "--http-log-path=/var/log/nginx/access_log" \
            "--error-log-path=/var/log/nginx/error_log" \
            "--without-mail_imap_module" \
            "--without-mail_smtp_module" \
            "--with-http_ssl_module" \
            "--with-http_realip_module" \
            "--with-http_stub_status_module" \
            "--with-http_gzip_static_module" \
            "--with-http_dav_module" \
            "--with-http_v2_module" \
            "--with-pcre=../pcre-${pcre_version}" \
            "--with-pcre-jit" \
            "--with-zlib=../zlib-${zlib_version}" \
            "--with-openssl=../openssl-OpenSSL_${openssl_version}" \
            "--with-openssl-opt=no-nextprotoneg" \
            "--add-module=../ngx_cache_purge-${ngx_cache_purge_version}" \
            "--add-module=../incubator-pagespeed-ngx-${NPS_VERSION}" \
            "--add-module=../headers-more-nginx-module-${more_clear_headers_v}" \
            "--add-module=../ngx_brotli" \
            "--add-module=../nginx-module-vts-${nginx_module_vts_v}" \
            "--with-cc-opt='-D FD_SETSIZE=32768'"

        make && make install

        CPU_CORES=$(grep -c "processor" /proc/cpuinfo)
        MAX_CLIENT=$((CPU_CORES * 1024))
        mv /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak
        wget -O /etc/nginx/nginx.conf "$UPDATE_LINK/nginx.conf"

        if [ ! -f /etc/nginx/nginx.conf ]; then
            mv /etc/nginx/nginx.conf.bak /etc/nginx/nginx.conf
        else
            rm -rf /etc/nginx/nginx.conf.bak
            sed -i "s/MAX_CLIENT/$MAX_CLIENT/g" /etc/nginx/nginx.conf
        fi

        if nginx -t; then
            systemctl restart nginx
            clear
            printf "%s\n" "${GREEN}Rebuild Nginx successful.${NC}"
        else
            clear
            nginx -t
            printf "%s\n" "${RED}${lang_nginx_config_error}${NC}"
        fi
        lemp_nginx
        ;;
    0)
        clear
        menu_lemp
        ;;
    *)
        clear
        printf "%s\n" "${RED}${WRONG_OPTION}${NC}"
        ;;
    esac
done
